{"version":3,"sources":["webpack:///./src/panels/config/cloud/google-assistant/cloud-google-assistant.ts","webpack:///./src/data/google_assistant.ts"],"names":["configIsExposed","config","undefined","should_expose","customElement","CloudGoogleAssistant","property","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_this2","this","_entities","html","_templateObject","emptyFilter","isEmptyFilter","cloudStatus","google_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_templateObject2","_showMoreInfo","traits","map","trait","substr","lastIndexOf","join","_exposeChanged","might_2fa","_templateObject3","Boolean","disable_2fa","_disable2FAChanged","_templateObject4","narrow","_templateObject5","_templateObject6","_openDomainToggler","_templateObject7","length","_templateObject8","_templateObject9","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","google_entity_configs","_callee","entities","_this3","regeneratorRuntime","wrap","_context","prev","next","callWS","type","sent","sort","a","b","stateA","stateB","compare","computeStateName","stop","ev","entityId","currentTarget","fireEvent","_callee2","newExposed","_context2","detail","value","_updateExposed","_callee3","curExposed","_context3","abrupt","_updateConfig","_ensureEntitySync","_callee4","newDisable2FA","curDisable2FA","_context4","_callee5","values","updatedConfig","_context5","updateCloudGoogleEntityConfig","Object","assign","_ensureStatusReload","_this4","showDomainTogglerDialog","domains","computeDomain","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_this5","_popstateSyncAttached","showToast","message","cloudSyncGoogleAssistant","css","_templateObject10","LitElement"],"mappings":"ghMAyCA,IAEMA,EAAkB,SAACC,GAAD,YACGC,IAAzBD,EAAOE,eAEHF,EAAOE,u1LAEZC,YAAc,6CACTC,smBACHC,kEACAA,yEACAA,oEACAA,uEACAA,2DACmE,uEACpC,8EACQ,yHAGTC,YAAW,SAACC,GAAD,OACxCC,YACED,EAAOE,gBACPF,EAAOG,iBACPH,EAAOI,gBACPJ,EAAOK,wDAIX,WAA0C,IAAAC,EAAAC,KACxC,QAAuBb,IAAnBa,KAAKC,UACP,OAAOC,YAAPC,KAIF,IAAMC,EAAcC,YAAcL,KAAKM,YAAYC,iBAC7CC,EAAaR,KAAKS,qBACtBT,KAAKM,YAAYC,iBAMbG,EAAgBV,KAAKW,mBAAqB,IAAIC,IAC9CC,OAA0C1B,IAA3Ba,KAAKW,kBAEtBG,EAAW,EAITC,EAAiC,GACjCC,EAAoC,GA6D1C,OA3DAhB,KAAKC,UAAUgB,QAAQ,SAACC,GACtB,IAAMC,EAAWpB,EAAKqB,KAAKC,OAAOH,EAAOI,WACnCpC,EAASa,EAAKwB,eAAeL,EAAOI,YAAc,GAClDE,EAAYpB,EACdnB,EAAgBC,GAChBsB,EAAWU,EAAOI,WAClBE,IACFV,IAEID,GACFH,EAAce,IAAIP,EAAOI,aAIdZ,EAAcgB,IAAIR,EAAOI,WACpCP,EACAC,GAEGW,KAAKzB,YAAZ0B,IAIgB7B,EAAKqB,KACDD,EAEHpB,EAAK8B,cAEZX,EAAOY,OACNC,IAAI,SAACC,GAAD,OAAWA,EAAMC,OAAOD,EAAME,YAAY,KAAO,KACrDC,KAAK,MAGIjB,EAAOI,WACNlB,EACFoB,EACQzB,EAAKqC,eAIxBlB,EAAOmB,UACLnC,YADFoC,IAGkBpB,EAAOI,UACRiB,QAAQrD,EAAOsD,aACPzC,EAAK0C,oBAK5B,OAMR5B,IACFb,KAAKW,kBAAoBD,GAGpBR,YAAPwC,IAGQ5B,EACLd,KAAK2C,OAIF,GAHAzC,YADJ0C,KAQIxC,EACIF,YADO2C,IAKM7C,KAAK8C,oBAGlB,GAGH1C,EAQG,GAPAF,YADJ6C,KAWEhC,EAAaiC,OAAS,EAClB9C,YADJ+C,IAG6BlC,GAEzB,GAGJC,EAAgBgC,OAAS,EACrB9C,YADJgD,IAG6BlC,GAEzB,8CAOd,SAAuBmC,GACrBC,EAAAC,EA9JE/D,EA8JFgE,WAAA,eAAAtD,MAAAuD,KAAAvD,KAAmBmD,GACnBnD,KAAKwD,kDAGP,SAAkBL,GAChBC,EAAAC,EAnKE/D,EAmKFgE,WAAA,UAAAtD,MAAAuD,KAAAvD,KAAcmD,GACVA,EAAazB,IAAI,iBACnB1B,KAAKuB,eAAiBvB,KAAKM,YAAYmD,MAAMC,0GAIjD,SAAAC,IAAA,IAAAC,EAAAC,EAAA7D,KAAA,OAAA8D,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACkDlE,KAAKoB,KClNlD+C,OAAuB,CAAEC,KAAM,oCDiNpC,QACQR,EADRI,EAAAK,MAEWC,KAAK,SAACC,EAAGC,GAChB,IAAMC,EAASZ,EAAKzC,KAAKC,OAAOkD,EAAEjD,WAC5BoD,EAASb,EAAKzC,KAAKC,OAAOmD,EAAElD,WAClC,OAAOqD,YACLF,EAASG,YAAiBH,GAAUF,EAAEjD,UACtCoD,EAASE,YAAiBF,GAAUF,EAAElD,aAG1CtB,KAAKC,UAAY2D,EAVnB,wBAAAI,EAAAa,SAAAlB,EAAA3D,wGAaA,SAAsB8E,GACpB,IAAMC,EAAWD,EAAGE,cAAc7D,SAASG,UAC3C2D,YAAUjF,KAAM,iBAAkB,CAAE+E,oGAGtC,SAAAG,EAA6BJ,GAA7B,IAAAC,EAAAI,EAAA,OAAArB,mBAAAC,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cACQa,EAAYD,EAAGE,cAAsBD,SACrCI,EAAaL,EAAGO,OAAOC,MAF/BF,EAAAlB,KAAA,EAGQlE,KAAKuF,eAAeR,EAAUI,GAHtC,wBAAAC,EAAAP,SAAAK,EAAAlF,qJAMA,SAAAwF,EAA6BT,EAAkBI,GAA/C,IAAAM,EAAA,OAAA3B,mBAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,UACQuB,EAAaxG,EAAgBe,KAAKuB,eAAewD,IAAa,IAChEI,IAAeM,EAFrB,CAAAC,EAAAxB,KAAA,eAAAwB,EAAAC,OAAA,wBAAAD,EAAAxB,KAAA,EAKQlE,KAAK4F,cAAcb,EAAU,CACjC3F,cAAe+F,IANnB,OAQEnF,KAAK6F,oBARP,wBAAAH,EAAAb,SAAAW,EAAAxF,2JAWA,SAAA8F,EAAiChB,GAAjC,IAAAC,EAAAgB,EAAAC,EAAA,OAAAlC,mBAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,UACQa,EAAYD,EAAGE,cAAsBD,SACrCgB,EAAgBjB,EAAGO,OAAOC,MAC1BU,EAAgBzD,SACnBvC,KAAKuB,eAAewD,IAAa,IAAIvC,aAEpCuD,IAAkBC,EANxB,CAAAC,EAAA/B,KAAA,eAAA+B,EAAAN,OAAA,wBAAAM,EAAA/B,KAAA,EASQlE,KAAK4F,cAAcb,EAAU,CACjCvC,YAAauD,IAVjB,wBAAAE,EAAApB,SAAAiB,EAAA9F,oJAcA,SAAAkG,EAA4BnB,EAAkBoB,GAA9C,IAAAC,EAAA,OAAAtC,mBAAAC,KAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,cAAAmC,EAAAnC,KAAA,EAC8BoC,YAC1BtG,KAAKoB,KACL2D,EACAoB,GAJJ,OACQC,EADRC,EAAAhC,KAMErE,KAAKuB,eAALgF,OAAAC,OAAA,GACKxG,KAAKuB,kBACI6E,KAAXrB,OAFH,8FAIA/E,KAAKyG,sBAVP,wBAAAJ,EAAAxB,kBAAAqB,EAAAlG,gHAaA,WAA6B,IAAA0G,EAAA1G,KAC3B2G,YAAwB3G,KAAM,CAC5B4G,QAAS5G,KAAKC,UAAW8B,IAAI,SAACb,GAAD,OAC3B2F,YAAc3F,EAAOI,aACrB7B,OAAO,SAAC6F,EAAOwB,EAAKC,GAAb,OAAsBA,EAAKC,QAAQ1B,KAAWwB,IACvDG,aAAc,SAACC,EAAQC,GACrBT,EAAKzG,UAAWgB,QAAQ,SAACC,GACnB2F,YAAc3F,EAAOI,aAAe4F,GACtCR,EAAKnB,eAAerE,EAAOI,UAAW6F,yDAOhD,WACE,IAAInH,KAAKoH,8BAAT,CAGApH,KAAKoH,+BAAgC,EAGrC,IAAMC,EAASrH,KAAKsH,cACpBC,OAAOC,iBACL,WACA,kBAAMvC,YAAUoC,EAAQ,4BACxB,CAAEI,MAAM,oDAIZ,WAA4B,IAAAC,EAAA1H,KAC1B,IAAIA,KAAK2H,sBAAT,CAGA3H,KAAK2H,uBAAwB,EAG7B,IAAMN,EAASrH,KAAKsH,cACpBC,OAAOC,iBACL,WACA,WACEI,YAAUP,EAAQ,CAAEQ,QAAS,qCAC7BC,YAAyBJ,EAAKtG,OAEhC,CAAEqG,MAAM,gDAIZ,WACE,OAAOM,YAAPC,UAxR+BC","file":"chunk.7caadcc791b7b5d611a3.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-toggle-button\";\nimport \"@polymer/paper-icon-button\";\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../../data/cloud\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showToast } from \"../../../../util/toast\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n} from \"../../../../data/google_assistant\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <paper-toggle-button\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @checked-changed=${this._exposeChanged}\n            >\n              Expose to Google Assistant\n            </paper-toggle-button>\n            ${entity.might_2fa\n              ? html`\n                  <paper-toggle-button\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @checked-changed=${this._disable2FAChanged}\n                  >\n                    Disable two factor authentication\n                  </paper-toggle-button>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"Google Assistant\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  Editing which entities are exposed via this UI is disabled\n                  because you have configured entity filters in\n                  configuration.yaml.\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>Exposed entities</h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>Not Exposed entities</h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = ev.detail.value;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = ev.detail.value;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n        --paper-toggle-button-label-spacing: 16px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      paper-toggle-button {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n","import { HomeAssistant } from \"../types\";\n\nexport interface GoogleEntity {\n  entity_id: string;\n  traits: string[];\n  might_2fa: boolean;\n}\n\nexport const fetchCloudGoogleEntities = (hass: HomeAssistant) =>\n  hass.callWS<GoogleEntity[]>({ type: \"cloud/google_assistant/entities\" });\n"],"sourceRoot":""}