{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-yaml-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","_decorate","customElement","_initialize","_HTMLElement","F","_HTMLElement2","HuiYamlEditor","_this","_classCallCheck","this","_getPrototypeOf","call","_assertThisInitialized","CodeMirror","commands","save","cm","fireEvent","getWrapperElement","_value","attachShadow","mode","innerHTML","concat","codeMirrorCSS","_inherits","kind","key","hass","_hass","setScrollBarDirection","codemirror","getValue","setValue","shadowRoot","querySelector","_this2","refresh","lineNumbers","tabSize","autofocus","viewportMargin","Infinity","extraKeys","Tab","Shift-Tab","gutters","computeRTL","on","_onChange","classList","toggle","HTMLElement","lovelaceStruct","interface","title","views","resources","optional","LovelaceFullConfigEditor","lovelace","closeEditor","_saving","_changed","_generation","LitElement","html","_templateObject","_closeEditor","localize","classMap","saved","_handleSave","_yamlChanged","yamlEditor","yaml","safeDump","config","clearHistory","changeGeneration","isClean","window","onbeforeunload","confirm","hasComments","safeLoad","alert","_context","t0","t1","saveConfig","t2","haStyle","css","_templateObject2","customElements","define"],"mappings":"oGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAIO,IAAMA,EAASC,YAAY,CAChCC,MAAO,CACLC,YCNG,SAAoBC,GACzB,MAAqB,iBAAVA,EACF,iCAEJA,EAAMC,SAAS,MACX,qDDEPC,KEPG,SAAgBF,GACrB,MAAqB,iBAAVA,EACF,4BAEJA,EAAMC,SAAS,MACX,8sPCeXE,CAAA,CADCC,YAAc,oBACf,SAAAC,EAAAC,GAAA,OAAAC,EAAA,SAAAC,GAOE,SAAAC,IAAqB,IAAAC,MAAA,mGAAAC,CAAAC,KAAAH,KACnBG,KAAAF,MAAAG,EAAAJ,GAAAK,KAAAF,qDADmBP,EAAAU,EAAAL,IAEnBM,IAAWC,SAASC,KAAO,SAACC,GAC1BC,YAAUD,EAAGE,oBAAqB,cAEpCX,EAAKY,OAAS,GACKZ,EAAKa,aAAa,CAAEC,KAAM,SAClCC,UAAX,wCAAAC,OAEYC,IAFZ,soCAPmBjB,EAPvB,yOAAAkB,CAAAnB,EAAAH,GAAAG,EAAA,GAAAf,EAAA,EAAAmC,KAAA,QAAAC,IAAA,QAAA9B,WAAA,IAAA6B,KAAA,QAAAC,IAAA,aAAA9B,WAAA,IAAA6B,KAAA,QAAAC,IAAA,SAAA9B,WAAA,IAAA6B,KAAA,MAAAC,IAAA,OAAA9B,MA6CE,SAAS+B,GACPnB,KAAKoB,MAAQD,EACTnB,KAAKoB,OACPpB,KAAKqB,0BAhDX,CAAAJ,KAAA,MAAAC,IAAA,QAAA9B,MAoDE,SAAUA,GACJY,KAAKsB,YACHlC,IAAUY,KAAKsB,WAAWC,YAC5BvB,KAAKsB,WAAWE,SAASpC,GAG7BY,KAAKU,OAAStB,IA1DlB,CAAA6B,KAAA,MAAAC,IAAA,QAAA9B,MA6DE,WACE,OAAOY,KAAKsB,WAAWC,aA9D3B,CAAAN,KAAA,MAAAC,IAAA,cAAA9B,MAiEE,WACE,QAAOY,KAAKyB,WAAYC,cAAc,qBAlE1C,CAAAT,KAAA,SAAAC,IAAA,oBAAA9B,MAqEE,WAAiC,IAAAuC,EAAA3B,KAC1BA,KAAKsB,WAuBRtB,KAAKsB,WAAWM,WAtBhB5B,KAAKsB,WAAalB,IACfJ,KAAKyB,WACN,CACErC,MAAOY,KAAKU,OACZmB,aAAa,EACbjB,KAAM,OACNkB,QAAS,EACTC,WAAW,EACXC,eAAgBC,IAChBC,UAAW,CACTC,IAAK,aACLC,YAAa,cAEfC,QACErC,KAAKoB,OAASkB,YAAWtC,KAAKoB,OAC1B,CAAC,aAAc,0BACf,KAGVpB,KAAKqB,wBACLrB,KAAKsB,WAAWiB,GAAG,UAAW,kBAAMZ,EAAKa,iBA3F/C,CAAAvB,KAAA,SAAAC,IAAA,YAAA9B,MAiGE,WACEoB,YAAUR,KAAM,eAAgB,CAAEZ,MAAOY,KAAKsB,WAAWC,eAlG7D,CAAAN,KAAA,SAAAC,IAAA,wBAAA9B,MAqGE,WACOY,KAAKsB,YAIVtB,KAAKsB,WACFb,oBACAgC,UAAUC,OAAO,MAAOJ,YAAWtC,KAAKoB,aA5GZuB,6sFCEnC,IAAMC,EAAiB5D,IAAO6D,UAAU,CACtCC,MAAO,UACPC,MAAO,CAAC,UACRC,UAAWhE,IAAOiE,SAAS,CAAC,aAGxBC,2QACG/B,cACAgC,kBACAC,qBACCC,iBACAC,kBACAC,2QAN6BC,8CAmBnC,OAAOC,YAAPC,IAMoB1D,KAAK2D,aAGb3D,KAAKmB,KAAMyC,SACX,8CAKAC,YAAS,CACTC,OAAyB,IAAlB9D,KAAKqD,UAAwC,IAAlBrD,KAAKsD,WAGvCtD,KAAKsD,SACHtD,KAAKmB,KAAMyC,SACT,uDAEF5D,KAAKmB,KAAMyC,SACT,6CAGqB5D,KAAK+D,YAC7B/D,KAAKmB,KAAMyC,SACZ,4CAOK5D,KAAKmB,KACGnB,KAAKgE,aACRhE,KAAK+D,oDAS3B/D,KAAKiE,WAAW7E,MAAQ8E,IAAKC,SAASnE,KAAKmD,SAAUiB,QACrDpE,KAAKiE,WAAW3C,WAAW+C,eAC3BrE,KAAKuD,YAAcvD,KAAKiE,WAAW3C,WAAWgD,kBAAiB,0CA8C1DtE,KAAKuD,cAGVvD,KAAKsD,UAAYtD,KAAKiE,WAAW3C,WAAWiD,QAAQvE,KAAKuD,aACrDvD,KAAKsD,WAAakB,OAAOC,eAC3BD,OAAOC,eAAiB,WACtB,OAAO,IAECzE,KAAKsD,UAAYkB,OAAOC,iBAClCD,OAAOC,eAAiB,8CAKtBzE,KAAKsD,WAEJoB,QAAQ,8DAKbF,OAAOC,eAAiB,KACpBzE,KAAKoD,aACPpD,KAAKoD,6LAKPpD,KAAKqD,SAAU,GAEXrD,KAAKiE,WAAWU,+BAEfD,QACC,gJASJtF,EAAQ8E,IAAKU,SAAS5E,KAAKiE,WAAW7E,8DAEtCyF,MAAK,yBAAA/D,OAAAgE,EAAAC,KACL/E,KAAKqD,SAAU,uCAIfjE,EAAQwD,EAAexD,6DAEvByF,MAAK,6BAAA/D,OAAAgE,EAAAE,2DAIChF,KAAKmD,SAAU8B,WAAW7F,8DAEhCyF,MAAK,wBAAA/D,OAAAgE,EAAAI,aAEPlF,KAAKuD,YAAcvD,KAAKiE,WAAW3C,WAAWgD,kBAAiB,GAC/DE,OAAOC,eAAiB,KACxBzE,KAAKqD,SAAU,EACfrD,KAAKsD,UAAW,4UAIhB,OAAOtD,KAAKyB,WAAYC,cAAc,0DA3KtC,MAAO,CACLP,KAAM,GACNgC,SAAU,GACVC,YAAa,GACbC,QAAS,GACTC,SAAU,mCA0DZ,MAAO,CACL6B,IACAC,YAFKC,4CAsHXC,eAAeC,OAAO,aAAcrC","file":"chunk.034d389c37068f6a39fe.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","// @ts-ignore\nimport CodeMirror from \"codemirror\";\nimport \"codemirror/mode/yaml/yaml\";\n// @ts-ignore\nimport codeMirrorCSS from \"codemirror/lib/codemirror.css\";\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { customElement } from \"lit-element\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"yaml-changed\": {\n      value: string;\n    };\n    \"yaml-save\": undefined;\n  }\n}\n\n@customElement(\"hui-yaml-editor\")\nexport class HuiYamlEditor extends HTMLElement {\n  public _hass?: HomeAssistant;\n\n  public codemirror!: any;\n\n  private _value: string;\n\n  public constructor() {\n    super();\n    CodeMirror.commands.save = (cm: CodeMirror) => {\n      fireEvent(cm.getWrapperElement(), \"yaml-save\");\n    };\n    this._value = \"\";\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.innerHTML = `\n            <style>\n              ${codeMirrorCSS}\n              .CodeMirror {\n                height: var(--code-mirror-height, auto);\n                direction: var(--code-mirror-direction, ltr);\n              }\n              .CodeMirror-scroll {\n                max-height: var(--code-mirror-max-height, --code-mirror-height);\n              }\n              .CodeMirror-gutters {\n                border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n                background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n                transition: 0.2s ease border-right;\n              }\n              .CodeMirror-focused .CodeMirror-gutters {\n                border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));;\n              }\n              .CodeMirror-linenumber {\n                color: var(--paper-dialog-color, var(--primary-text-color));\n              }\n              .rtl .CodeMirror-vscrollbar {\n                right: auto;\n                left: 0px;\n              }\n              .rtl-gutter {\n                width: 20px;\n              }\n            </style>`;\n  }\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    if (this._hass) {\n      this.setScrollBarDirection();\n    }\n  }\n\n  set value(value: string) {\n    if (this.codemirror) {\n      if (value !== this.codemirror.getValue()) {\n        this.codemirror.setValue(value);\n      }\n    }\n    this._value = value;\n  }\n\n  get value(): string {\n    return this.codemirror.getValue();\n  }\n\n  get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback(): void {\n    if (!this.codemirror) {\n      this.codemirror = CodeMirror(\n        (this.shadowRoot as unknown) as HTMLElement,\n        {\n          value: this._value,\n          lineNumbers: true,\n          mode: \"yaml\",\n          tabSize: 2,\n          autofocus: true,\n          viewportMargin: Infinity,\n          extraKeys: {\n            Tab: \"indentMore\",\n            \"Shift-Tab\": \"indentLess\",\n          },\n          gutters:\n            this._hass && computeRTL(this._hass!)\n              ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"]\n              : [],\n        }\n      );\n      this.setScrollBarDirection();\n      this.codemirror.on(\"changes\", () => this._onChange());\n    } else {\n      this.codemirror.refresh();\n    }\n  }\n\n  private _onChange(): void {\n    fireEvent(this, \"yaml-changed\", { value: this.codemirror.getValue() });\n  }\n\n  private setScrollBarDirection(): void {\n    if (!this.codemirror) {\n      return;\n    }\n\n    this.codemirror\n      .getWrapperElement()\n      .classList.toggle(\"rtl\", computeRTL(this._hass!));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-yaml-editor\": HuiYamlEditor;\n  }\n}\n","import { LitElement, html, TemplateResult, CSSResult, css } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport yaml from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"./components/hui-yaml-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HuiYamlEditor } from \"./components/hui-yaml-editor\";\nimport { HomeAssistant } from \"../../types\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\nclass LovelaceFullConfigEditor extends LitElement {\n  public hass?: HomeAssistant;\n  public lovelace?: Lovelace;\n  public closeEditor?: () => void;\n  private _saving?: boolean;\n  private _changed?: boolean;\n  private _generation?: number;\n\n  static get properties() {\n    return {\n      hass: {},\n      lovelace: {},\n      closeEditor: {},\n      _saving: {},\n      _changed: {},\n    };\n  }\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button raised @click=\"${this._handleSave}\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <hui-yaml-editor\n            .hass=\"${this.hass}\"\n            @yaml-changed=\"${this._yamlChanged}\"\n            @yaml-save=\"${this._handleSave}\"\n          >\n          </hui-yaml-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = yaml.safeDump(this.lovelace!.config);\n    this.yamlEditor.codemirror.clearHistory();\n    this._generation = this.yamlEditor.codemirror.changeGeneration(true);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    if (!this._generation) {\n      return;\n    }\n    this._changed = !this.yamlEditor.codemirror.isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\"You have unsaved changes, are you sure you want to exit?\")\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          \"Your config contains comment(s), these will not be saved. Do you want to continue?\"\n        )\n      ) {\n        return;\n      }\n    }\n\n    let value;\n    try {\n      value = yaml.safeLoad(this.yamlEditor.value);\n    } catch (err) {\n      alert(`Unable to parse YAML: ${err}`);\n      this._saving = false;\n      return;\n    }\n    try {\n      value = lovelaceStruct(value);\n    } catch (err) {\n      alert(`Your config is not valid: ${err}`);\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(value);\n    } catch (err) {\n      alert(`Unable to save YAML: ${err}`);\n    }\n    this._generation = this.yamlEditor.codemirror.changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HuiYamlEditor {\n    return this.shadowRoot!.querySelector(\"hui-yaml-editor\")!;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n\ncustomElements.define(\"hui-editor\", LovelaceFullConfigEditor);\n"],"sourceRoot":""}