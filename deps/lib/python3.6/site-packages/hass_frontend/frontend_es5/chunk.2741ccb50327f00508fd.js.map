{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///./src/panels/lovelace/editor/config-elements/hui-markdown-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","configElementStyle","html","_templateObject","Polymer","_template","is","behaviors","IronValidatableBehavior","IronControlState","properties","observer","type","String","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","required","minlength","maxlength","label","listeners","input","textarea","this","$","selectionStart","selectionEnd","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","dom","path","target","_constrain","tokens","_tokens","length","slice","push","join","replace","split","_updateCached","paper_textarea_templateObject","PaperInputBehavior","IronFormElementBehavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement","cardConfigStruct","title","content","HuiMarkdownCardEditor","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","args","Array","_key","_getPrototypeOf","apply","concat","_assertThisInitialized","_inherits","kind","decorators","property","key","config","_config","hass","_templateObject2","_title","_content","ev","configValue","Object","assign","fireEvent","LitElement"],"mappings":"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","file":"chunk.2741ccb50327f00508fd.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { MarkdownCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string?\",\n  content: \"string\",\n});\n\n@customElement(\"hui-markdown-card-editor\")\nexport class HuiMarkdownCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: MarkdownCardConfig;\n\n  public setConfig(config: MarkdownCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _content(): string {\n    return this._config!.content || \"\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Title\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <paper-textarea\n          label=\"Content\"\n          .value=\"${this._content}\"\n          .configValue=\"${\"content\"}\"\n          @value-changed=\"${this._valueChanged}\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          spellcheck=\"false\"\n        ></paper-textarea>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-markdown-card-editor\": HuiMarkdownCardEditor;\n  }\n}\n"],"sourceRoot":""}