{"version":3,"sources":["webpack:///./src/panels/config/cloud/alexa/cloud-alexa.ts"],"names":["IGNORE_INTERFACES","configIsExposed","config","undefined","should_expose","customElement","CloudAlexa","property","type","Boolean","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_this2","this","_entities","html","_templateObject","emptyFilter","isEmptyFilter","cloudStatus","alexa_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_templateObject2","_showMoreInfo","interfaces","ifc","includes","map","replace","join","_exposeChanged","_templateObject3","narrow","_templateObject4","_templateObject5","_openDomainToggler","_templateObject6","length","_templateObject7","_templateObject8","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","alexa_entity_configs","_callee","entities","_this3","regeneratorRuntime","wrap","_context","prev","next","fetchCloudAlexaEntities","sent","sort","a","b","stateA","stateB","compare","computeStateName","stop","ev","entityId","currentTarget","fireEvent","_callee2","newExposed","_context2","detail","value","_updateExposed","_callee3","curExposed","_context3","abrupt","_updateConfig","_ensureEntitySync","_callee4","values","updatedConfig","_context4","updateCloudAlexaEntityConfig","Object","assign","_ensureStatusReload","_this4","showDomainTogglerDialog","domains","computeDomain","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","css","_templateObject9","LitElement"],"mappings":"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","file":"chunk.fea524b923325878d40a.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-toggle-button\";\nimport \"@polymer/paper-icon-button\";\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudAlexaEntityConfig,\n  AlexaEntityConfig,\n} from \"../../../../data/cloud\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\nconst configIsExposed = (config: AlexaEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() private _entities?: AlexaEntity[];\n\n  @property()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.interfaces\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                .map((ifc) =>\n                  ifc.replace(\"Alexa.\", \"\").replace(\"Controller\", \"\")\n                )\n                .join(\", \")}\n            </state-info>\n            <paper-toggle-button\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @checked-changed=${this._exposeChanged}\n            >\n              Expose to Alexa\n            </paper-toggle-button>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"Alexa\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  Editing which entities are exposed via this UI is disabled\n                  because you have configured entity filters in\n                  configuration.yaml.\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>Exposed entities</h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>Not Exposed entities</h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = ev.detail.value;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    // const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n        // showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        // cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n        --paper-toggle-button-label-spacing: 16px;\n      }\n      paper-toggle-button {\n        clear: both;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      paper-toggle-button {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"sourceRoot":""}