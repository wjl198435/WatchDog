{"version":3,"sources":["webpack:///./src/common/config/is_component_loaded.ts","webpack:///./src/data/cloud.ts","webpack:///./src/common/dom/media_query.ts","webpack:///./src/panels/config/ha-panel-config.ts"],"names":["isComponentLoaded","hass","component","config","components","indexOf","__webpack_require__","d","__webpack_exports__","fetchCloudStatus","createCloudhook","deleteCloudhook","connectCloudRemote","disconnectCloudRemote","fetchCloudSubscriptionInfo","updateCloudPref","updateCloudGoogleEntityConfig","cloudSyncGoogleAssistant","updateCloudAlexaEntityConfig","callWS","type","webhookId","webhook_id","prefs","Object","assign","entityId","values","entity_id","callApi","listenMediaQuery","mediaQuery","matchesChanged","mql","matchMedia","listener","e","matches","addListener","removeListener","customElement","HaPanelConfig","property","defaultPage","cacheAll","preloadAll","routes","area_registry","tag","load","then","bind","automation","Promise","all","cloud","core","server_control","customize","dashboard","entity_registry","integrations","person","script","users","zha","zwave","_this2","this","_get","_getPrototypeOf","prototype","call","_listeners","push","_wide","_wideSidebar","getOptimisticFrontendUserDataCollection","connection","subscribe","coreUserData","_coreUserData","length","pop","changedProps","_this3","_updateCloudStatus","addEventListener","el","showAdvanced","isWide","dockedSidebar","setProperties","route","routeTail","narrow","cloudStatus","_cloudStatus","_callee","_this4","regeneratorRuntime","wrap","_context","prev","next","sent","setTimeout","stop","HassRouterPage"],"mappings":"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","file":"chunk.6539c0a90ae442112367.js","sourcesContent":["import { HomeAssistant } from \"../../types\";\n\n/** Return if a component is loaded. */\nexport default function isComponentLoaded(\n  hass: HomeAssistant,\n  component: string\n): boolean {\n  return hass && hass.config.components.indexOf(component) !== -1;\n}\n","import { HomeAssistant } from \"../types\";\nimport { EntityFilter } from \"../common/entity/entity_filter\";\n\ninterface CloudStatusBase {\n  logged_in: boolean;\n  cloud: \"disconnected\" | \"connecting\" | \"connected\";\n}\n\nexport interface GoogleEntityConfig {\n  should_expose?: boolean;\n  override_name?: string;\n  aliases?: string[];\n  disable_2fa?: boolean;\n}\n\nexport interface AlexaEntityConfig {\n  should_expose?: boolean;\n}\n\nexport interface CertificateInformation {\n  common_name: string;\n  expire_date: string;\n  fingerprint: string;\n}\n\nexport interface CloudPreferences {\n  google_enabled: boolean;\n  alexa_enabled: boolean;\n  remote_enabled: boolean;\n  google_secure_devices_pin: string | undefined;\n  cloudhooks: { [webhookId: string]: CloudWebhook };\n  google_entity_configs: {\n    [entityId: string]: GoogleEntityConfig;\n  };\n  alexa_entity_configs: {\n    [entityId: string]: AlexaEntityConfig;\n  };\n  alexa_report_state: boolean;\n}\n\nexport type CloudStatusLoggedIn = CloudStatusBase & {\n  email: string;\n  google_entities: EntityFilter;\n  google_domains: string[];\n  alexa_entities: EntityFilter;\n  prefs: CloudPreferences;\n  remote_domain: string | undefined;\n  remote_connected: boolean;\n  remote_certificate: undefined | CertificateInformation;\n};\n\nexport type CloudStatus = CloudStatusBase | CloudStatusLoggedIn;\n\nexport interface SubscriptionInfo {\n  human_description: string;\n}\n\nexport interface CloudWebhook {\n  webhook_id: string;\n  cloudhook_id: string;\n  cloudhook_url: string;\n  managed?: boolean;\n}\n\nexport const fetchCloudStatus = (hass: HomeAssistant) =>\n  hass.callWS<CloudStatus>({ type: \"cloud/status\" });\n\nexport const createCloudhook = (hass: HomeAssistant, webhookId: string) =>\n  hass.callWS<CloudWebhook>({\n    type: \"cloud/cloudhook/create\",\n    webhook_id: webhookId,\n  });\n\nexport const deleteCloudhook = (hass: HomeAssistant, webhookId: string) =>\n  hass.callWS({\n    type: \"cloud/cloudhook/delete\",\n    webhook_id: webhookId,\n  });\n\nexport const connectCloudRemote = (hass: HomeAssistant) =>\n  hass.callWS({\n    type: \"cloud/remote/connect\",\n  });\n\nexport const disconnectCloudRemote = (hass: HomeAssistant) =>\n  hass.callWS({\n    type: \"cloud/remote/disconnect\",\n  });\n\nexport const fetchCloudSubscriptionInfo = (hass: HomeAssistant) =>\n  hass.callWS<SubscriptionInfo>({ type: \"cloud/subscription\" });\n\nexport const updateCloudPref = (\n  hass: HomeAssistant,\n  prefs: {\n    google_enabled?: CloudPreferences[\"google_enabled\"];\n    alexa_enabled?: CloudPreferences[\"alexa_enabled\"];\n    alexa_report_state?: CloudPreferences[\"alexa_report_state\"];\n    google_secure_devices_pin?: CloudPreferences[\"google_secure_devices_pin\"];\n  }\n) =>\n  hass.callWS({\n    type: \"cloud/update_prefs\",\n    ...prefs,\n  });\n\nexport const updateCloudGoogleEntityConfig = (\n  hass: HomeAssistant,\n  entityId: string,\n  values: GoogleEntityConfig\n) =>\n  hass.callWS<GoogleEntityConfig>({\n    type: \"cloud/google_assistant/entities/update\",\n    entity_id: entityId,\n    ...values,\n  });\n\nexport const cloudSyncGoogleAssistant = (hass: HomeAssistant) =>\n  hass.callApi(\"POST\", \"cloud/google_actions/sync\");\n\nexport const updateCloudAlexaEntityConfig = (\n  hass: HomeAssistant,\n  entityId: string,\n  values: AlexaEntityConfig\n) =>\n  hass.callWS<AlexaEntityConfig>({\n    type: \"cloud/alexa/entities/update\",\n    entity_id: entityId,\n    ...values,\n  });\n","/**\n * Attach a media query. Listener is called right away and when it matches.\n * @param mediaQuery media query to match.\n * @param listener listener to call when media query changes between match/unmatch\n * @returns function to remove the listener.\n */\nexport const listenMediaQuery = (\n  mediaQuery: string,\n  matchesChanged: (matches: boolean) => void\n) => {\n  const mql = matchMedia(mediaQuery);\n  const listener = (e) => matchesChanged(e.matches);\n  mql.addListener(listener);\n  matchesChanged(mql.matches);\n  return () => mql.removeListener(listener);\n};\n","import { property, PropertyValues, customElement } from \"lit-element\";\nimport \"../../layouts/hass-loading-screen\";\nimport isComponentLoaded from \"../../common/config/is_component_loaded\";\nimport { HomeAssistant } from \"../../types\";\nimport { CloudStatus, fetchCloudStatus } from \"../../data/cloud\";\nimport { listenMediaQuery } from \"../../common/dom/media_query\";\nimport { HassRouterPage, RouterOptions } from \"../../layouts/hass-router-page\";\nimport {\n  CoreFrontendUserData,\n  getOptimisticFrontendUserDataCollection,\n} from \"../../data/frontend\";\nimport { PolymerElement } from \"@polymer/polymer\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"ha-refresh-cloud-status\": undefined;\n  }\n}\n\n@customElement(\"ha-panel-config\")\nclass HaPanelConfig extends HassRouterPage {\n  @property() public hass!: HomeAssistant;\n  @property() public narrow!: boolean;\n\n  protected routerOptions: RouterOptions = {\n    defaultPage: \"dashboard\",\n    cacheAll: true,\n    preloadAll: true,\n    routes: {\n      area_registry: {\n        tag: \"ha-config-area-registry\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-area-registry\" */ \"./area_registry/ha-config-area-registry\"),\n      },\n      automation: {\n        tag: \"ha-config-automation\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-automation\" */ \"./automation/ha-config-automation\"),\n      },\n      cloud: {\n        tag: \"ha-config-cloud\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-cloud\" */ \"./cloud/ha-config-cloud\"),\n      },\n      core: {\n        tag: \"ha-config-core\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-core\" */ \"./core/ha-config-core\"),\n      },\n      server_control: {\n        tag: \"ha-config-server-control\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-server-control\" */ \"./server_control/ha-config-server-control\"),\n      },\n      customize: {\n        tag: \"ha-config-customize\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-customize\" */ \"./customize/ha-config-customize\"),\n      },\n      dashboard: {\n        tag: \"ha-config-dashboard\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-dashboard\" */ \"./dashboard/ha-config-dashboard\"),\n      },\n      entity_registry: {\n        tag: \"ha-config-entity-registry\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-entity-registry\" */ \"./entity_registry/ha-config-entity-registry\"),\n      },\n      integrations: {\n        tag: \"ha-config-integrations\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-integrations\" */ \"./integrations/ha-config-integrations\"),\n      },\n      person: {\n        tag: \"ha-config-person\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-person\" */ \"./person/ha-config-person\"),\n      },\n      script: {\n        tag: \"ha-config-script\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-script\" */ \"./script/ha-config-script\"),\n      },\n      users: {\n        tag: \"ha-config-users\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-users\" */ \"./users/ha-config-users\"),\n      },\n      zha: {\n        tag: \"zha-config-panel\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-zha\" */ \"./zha/zha-config-panel\"),\n      },\n      zwave: {\n        tag: \"ha-config-zwave\",\n        load: () =>\n          import(/* webpackChunkName: \"panel-config-zwave\" */ \"./zwave/ha-config-zwave\"),\n      },\n    },\n  };\n\n  @property() private _wideSidebar: boolean = false;\n  @property() private _wide: boolean = false;\n  @property() private _coreUserData?: CoreFrontendUserData;\n  @property() private _cloudStatus?: CloudStatus;\n\n  private _listeners: Array<() => void> = [];\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._listeners.push(\n      listenMediaQuery(\"(min-width: 1040px)\", (matches) => {\n        this._wide = matches;\n      })\n    );\n    this._listeners.push(\n      listenMediaQuery(\"(min-width: 1296px)\", (matches) => {\n        this._wideSidebar = matches;\n      })\n    );\n    this._listeners.push(\n      getOptimisticFrontendUserDataCollection(\n        this.hass.connection,\n        \"core\"\n      ).subscribe((coreUserData) => {\n        this._coreUserData = coreUserData || {};\n      })\n    );\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    while (this._listeners.length) {\n      this._listeners.pop()!();\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"cloud\")) {\n      this._updateCloudStatus();\n    }\n    this.addEventListener(\"ha-refresh-cloud-status\", () =>\n      this._updateCloudStatus()\n    );\n  }\n\n  protected updatePageEl(el) {\n    const showAdvanced = !!(\n      this._coreUserData && this._coreUserData.showAdvanced\n    );\n    const isWide =\n      this.hass.dockedSidebar === \"docked\" ? this._wideSidebar : this._wide;\n\n    if (\"setProperties\" in el) {\n      // As long as we have Polymer panels\n      (el as PolymerElement).setProperties({\n        route: this.routeTail,\n        hass: this.hass,\n        showAdvanced,\n        isWide,\n        narrow: this.narrow,\n        cloudStatus: this._cloudStatus,\n      });\n    } else {\n      el.route = this.routeTail;\n      el.hass = this.hass;\n      el.showAdvanced = showAdvanced;\n      el.isWide = isWide;\n      el.narrow = this.narrow;\n      el.cloudStatus = this._cloudStatus;\n    }\n  }\n\n  private async _updateCloudStatus() {\n    this._cloudStatus = await fetchCloudStatus(this.hass);\n\n    if (this._cloudStatus.cloud === \"connecting\") {\n      setTimeout(() => this._updateCloudStatus(), 5000);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-config\": HaPanelConfig;\n  }\n}\n"],"sourceRoot":""}