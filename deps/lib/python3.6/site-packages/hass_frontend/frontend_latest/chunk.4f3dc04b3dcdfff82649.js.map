{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-iframe-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","StructError","TypeError","attrs","type","path","JSON","data","reason","errors","length","push","this","Error","captureStackTrace","constructor","stack","toString","Object","prototype","kindOf","val","ctorName","Array","isArray","isBuffer","callee","err","message","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","throw","return","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","resolveDefaults","defaults","Kind","validate","any","schema","defaults$$1","options","tuple","list","func","object","required","union","intersection","scalar","optional","en","map","s","e","String","join","undefined","result","isValid","failure","_extends","array","element","error","ret","i","v","r","forEach","singleE","concat","first","obj","ks","properties","key","kind","valueKeys","propertiesKeys","Set","fn","kinds","k","Math","t","Kinds","dict","keys","values","resolved","e2","r2","enums","instance","lazy","literal","partial","createSchema","Types","config","Struct","defineProperty","assert","test","TYPES","isNaN","configElementStyle","html","cardConfigStruct","title","url","aspect_ratio","HuiIframeCardEditor","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","decorators","property","_config","hass","_title","_valueChanged","Number","_aspect_ratio","_url","ev","target","configValue","assign","fireEvent","LitElement"],"mappings":"oGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAIO,MAAMA,EAASC,YAAY,CAChCC,MAAO,CACLC,YCNG,SAAoBC,GACzB,MAAqB,iBAAVA,EACF,iCAEJA,EAAMC,SAAS,MACX,qDDEPC,KEPG,SAAgBF,GACrB,MAAqB,iBAAVA,EACF,4BAEJA,EAAMC,SAAS,MACX,gFCLXR,EAAAC,EAAAC,EAAA,sBAAAE,IAMA,MAAAM,UAAAC,wBACEC,SACQC,OAAAC,OAAAP,SAANK,sCAC8CC,MAC5CC,mBAAwBA,gBAAqB,qBAC5BC,mCAIrBH,SACkBF,SAAhBE,UAGMI,OAAAF,OAAAP,QAAAU,SAAAJ,OAAAK,OAAmCA,EAAnC,IAANN,OACAI,YACAF,YACAP,aACAU,cACAJ,YACAK,SAEKA,EAALC,UACEC,KAAAC,MAGEC,MAAJC,wBACEA,kBAAAF,KAA8BA,KAA9BG,kBAEAC,OAAa,IAAAH,OAAbG,OClCN,IAAIC,EAAWC,OAAOC,UAAUF,SAEhCG,EAAiB,SAAgBC,GAC/B,QAAY,IAARA,EAAgB,MAAO,YAC3B,GAAY,OAARA,EAAc,MAAO,OAEzB,IAAIjB,SAAciB,EAClB,GAAa,YAATjB,EAAoB,MAAO,UAC/B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,aAATA,EACF,MAoFwB,sBAAnBkB,EApFgBD,GAAO,oBAAsB,WAGpD,GAwDF,SAAiBA,GACf,OAAIE,MAAMC,QAAgBD,MAAMC,QAAQH,GACjCA,aAAeE,MA1DlBC,CAAQH,GAAM,MAAO,QACzB,GA2GF,SAAkBA,GAChB,GAAIA,EAAIN,aAAmD,mBAA7BM,EAAIN,YAAYU,SAC5C,OAAOJ,EAAIN,YAAYU,SAASJ,GAElC,OAAO,EA/GHI,CAASJ,GAAM,MAAO,SAC1B,GAwFF,SAAqBA,GACnB,IACE,GAA0B,iBAAfA,EAAIX,QAA6C,mBAAfW,EAAIK,OAC/C,OAAO,EAET,MAAOC,GACP,IAAuC,IAAnCA,EAAIC,QAAQC,QAAQ,UACtB,OAAO,EAGX,OAAO,EAlGHC,CAAYT,GAAM,MAAO,YAC7B,GA8DF,SAAgBA,GACd,OAAIA,aAAeU,MACgB,mBAArBV,EAAIW,cACU,mBAAhBX,EAAIY,SACY,mBAAhBZ,EAAIa,QAlEZC,CAAOd,GAAM,MAAO,OACxB,GAyDF,SAAiBA,GACf,OAAOA,aAAeR,OAAiC,iBAAhBQ,EAAIO,SAAwBP,EAAIN,aAA0D,iBAApCM,EAAIN,YAAYqB,gBA1DzGC,CAAQhB,GAAM,MAAO,QACzB,GAmEF,SAAkBA,GAChB,OAAIA,aAAeiB,QACS,iBAAdjB,EAAIkB,OACa,kBAAnBlB,EAAImB,YACc,kBAAlBnB,EAAIoB,WACW,kBAAfpB,EAAIqB,OAxEZC,CAAStB,GAAM,MAAO,SAE1B,OAAQC,EAASD,IACf,IAAK,SAAU,MAAO,SACtB,IAAK,UAAW,MAAO,UAGvB,IAAK,UAAW,MAAO,UACvB,IAAK,UAAW,MAAO,UACvB,IAAK,MAAO,MAAO,MACnB,IAAK,MAAO,MAAO,MAGnB,IAAK,YAAa,MAAO,YACzB,IAAK,aAAc,MAAO,aAC1B,IAAK,oBAAqB,MAAO,oBAGjC,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAG3B,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAC3B,IAAK,eAAgB,MAAO,eAC5B,IAAK,eAAgB,MAAO,eAG9B,GAmDF,SAAwBA,GACtB,MAA4B,mBAAdA,EAAIuB,OACS,mBAAfvB,EAAIwB,QACS,mBAAbxB,EAAIyB,KAtDZC,CAAe1B,GACjB,MAAO,YAKT,OADAjB,EAAOa,EAAS+B,KAAK3B,IAEnB,IAAK,kBAAmB,MAAO,SAE/B,IAAK,wBAAyB,MAAO,cACrC,IAAK,wBAAyB,MAAO,cACrC,IAAK,2BAA4B,MAAO,iBACxC,IAAK,0BAA2B,MAAO,gBAIzC,OAAOjB,EAAK6C,MAAM,GAAI,GAAGC,cAAcC,QAAQ,MAAO,KAGxD,SAAS7B,EAASD,GAChB,OAAOA,EAAIN,YAAcM,EAAIN,YAAYqC,KAAO,KC9DlD,MAAMC,EAAN,iBAQMC,EAAN,eCLO,SAAAC,EAAAzD,YACKA,IAASA,EAAnBuD,IAWK,SAAAG,EAAAC,EAAA3D,SACE,mBAAA2D,EAAiCA,EAAjC3D,GAAP2D,0KCXF,MAAAC,cACEN,EAAAhD,EAAAuD,QACEP,YACAhD,YACAuD,YAYJ,SAAAC,EAAAC,EAAAC,EAAAC,MACMR,EAAJM,UACSA,EAAPP,MAGEO,aAAJH,SACEG,SAGMzC,EAARyC,QACE,eACSA,WACHG,MADGH,GAEHI,MAFJF,OAKF,kBACSG,MAAPH,OAGF,gBACSI,MAAPJ,OAGF,cAEE3D,EADIgE,GAAJ,KAGIP,WAAJ,UACE,IACSA,WAAT,IAGEA,WAAJ,KAA0B,GAEjBQ,EADSR,QAAhB,aACOQ,EAAPN,QACK,GAAIF,WAAJ,KAA0B,GAExBS,EADST,QAAhB,YACOS,EAAPP,UAEOQ,MAAPR,UAGFK,MACSI,WAAPT,IAGF3D,SASI,IAAAS,yBAA6BgD,KA2FvC,SAAAY,EAAAZ,EAAAC,EAAAC,MACE,UAAI3C,WAMM,IAAAP,yBAA6BgD,WAKjCzD,EAAOyD,EAAAa,IACNC,eAEMrE,eAAPqE,GACA,MAAAC,UACOC,OAAPF,MALOG,KAAb,cAgBO,IAAApB,EAjBP,OAiBOtD,EANU,CAACN,EAAQ0D,EAATM,KACRD,cACH,MAAAkB,EADGlB,GAEH,CAAC,CAAEtD,KAAFT,EAAeO,KAAf,GAAAP,QAFLM,UA8BJ,SAAA8D,EAAAL,EAAAC,EAAAC,MACE,aAAI3C,WAMM,IAAAP,yBAA6BgD,YA0ChC,IAAAH,EAtCP,WACA,aACiB,CAAC5D,EAAQ0D,EAATM,GAAAvD,WACTyE,EAASnB,IAAftD,OAEA0E,EADIC,EAAU,CAAE7E,KAAF,GAAYG,OAA1B,aAGQY,EAAR4D,QACE,YACEA,YAGF,YACE,IACAxE,OAAAwE,YAGF,YACE,SACAE,EAAAF,uBASQ,IAAAnE,yBAA6BmE,YAKlCC,EACH,MAAAF,EADGE,GAEH,CAAAE,EAAA,CAAA/E,KAlCN,aAkCMN,QAAgBS,KAAhBT,GAFJoF,MAgMJ,SAAAjB,EAAAJ,EAAAC,EAAAC,MACM3C,gBAAJ,IAAkCyC,eAMxB,IAAAhD,yBAA6BgD,WAIjCuB,EAAQb,iBAAdR,GACMsB,EAAUzB,EAAIC,EAAJD,UAAhBG,GAEM3D,MAAWiF,EAAQjF,eAuClB,IAAAsD,EAxCP,OAwCOtD,EAtCU,CAACN,EAAQ0D,EAATM,YACTwB,EAAAN,GAAkBI,WAAxBtF,MAEAwF,WACElF,OACO,CAAPkF,KAGFN,QACMvE,EAAN,GACM8E,EAAN,OAEK,IAAIC,EAAT,EAAgBA,EAAI1F,EAApBY,OAAkC8E,IAAK,OAC/BC,EAAI3F,EAAV0F,IACMZ,EAAAc,GAASL,WAAfI,GAEAb,GACeA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAAmF,GAAAK,OAAWD,EAA1BvF,QACAE,KAAAT,IACAa,KAAAiF,OAKJJ,GAAAE,KAGEjF,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,KAkCJ,SAAApB,EAAAN,EAAAC,EAAAC,MACE,WAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjCkC,EAAMxB,kBAAZR,GACMiC,EAAN,GACMC,EAAN,OAEK,MAALC,KAAArC,EAA0B,GACxBlD,KAAAuF,SAEMC,EAAOvC,EADHC,EAAVqC,QACatC,EAAbG,KACAmC,GAAAC,QAII/F,MAAW4F,mBAwDV,IAAAtC,EAzDP,SAyDOtD,EAvDU,CAACN,EAAQ0D,EAATM,YACTwB,GAAUS,WAAhBjG,MAEAwF,WACElF,OACO,CAAPkF,SAGI7E,EAAN,GACM8E,EAAN,GACMa,EAAYlF,YAAlBpB,GACMuG,EAAiBnF,YAAvB+E,MACa,IAAAK,IAAQF,SAArBC,IAEAV,QAAaO,QACPT,EAAI3F,EAARoG,SACMC,EAAOF,EAAbC,WAEAnB,IAAIU,MAEEjC,EADMC,GAAYA,EAAtByC,GACApG,KAGFqG,EAAW,OACHvB,EAAI,CAAErE,KAAFT,EAAeO,KAAM,CAArB6F,GAA4BpG,MAAtC2F,iBACA9E,KAAAiE,SAIIA,EAAAc,GAASS,aAAfrG,GAEA8E,GACeA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAA6F,GAAAL,OAAaD,EAA5BvF,QACAE,KAAAT,IACAa,KAAAiF,MAKAM,aAAJnB,IAAoBW,OAClBQ,GAAAR,KAIAjF,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,KAcJ,SAAAf,EAAAX,EAAAC,EAAAC,UACSM,EAAM,CAAAR,EAANQ,eAAPN,GA4FF,SAAAQ,EAAAV,EAAAC,EAAAC,MACE,WAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjCjE,SAANmE,EACMwC,EAAK3G,EAAXiE,MAEA,aAAIzC,WAMM,IAAAP,uBAA2BgD,WAI/BsC,EAAOjC,OAEP9D,EAANyD,SAYO,IAAAH,EAbP,SAaOtD,EAXUN,UACTwF,EAAAN,GAAkBmB,WAAxBrG,UAEAwF,KACElF,OACO,CAAPkF,IAGK,MAAAP,EAAPC,KAcJ,SAAAhB,EAAAH,EAAAC,EAAAC,MACE,UAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjC2C,EAAQ3C,MAAWc,GAAKf,WAA9BG,IACMqB,EAAQb,iBAAdR,GAEM3D,MAAWoG,MAAUC,GAAKA,EAAfD,uBA+CV,IAAA9C,EAhDP,QAgDOtD,EA9CU,CAACN,EAAQ0D,EAATM,YACTwB,GAAUF,WAAhBtF,MAEAwF,WACElF,OACO,CAAPkF,SAGIC,EAAN,GACM9E,EAAN,GACMC,EAASgG,SAAS5G,EAAT4G,OAAuBF,EAAtC9F,YAEK,IAAI8E,EAAT,EAAgBA,EAAhB9E,EAA4B8E,IAAK,OACzBW,EAAOK,EAAbhB,GACMC,EAAI3F,EAAV0F,OAEAW,EAAW,OACHvB,EAAI,CAAErE,KAAFT,EAAeO,KAAM,CAArBmF,GAA0B1F,MAApC2F,KACA9E,KAAAiE,kBAIIA,EAAAc,GAASS,WAAfV,GAEAb,GACeA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAAmF,GAAAK,OAAWD,EAA1BvF,QACAE,KAAAT,IACAa,KAAAiF,OAKJJ,GAAAE,KAGEjF,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,KAcJ,SAAAlB,EAAAR,EAAAC,EAAAC,MACE,UAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjC2C,EAAQ3C,MAAWc,GAAKf,WAA9BG,IAEM3D,EAAOoG,MAAUC,GAAKA,EAAfD,WAAb,cAiBO,IAAA9C,EAlBP,QAkBOtD,EAhBU,CAACN,EAAQ0D,EAATM,YACTrD,EAAN,OAEK,MAALgG,KAAAD,EAAuB,OACf5B,EAAAc,GAASe,WAAf3G,OAEA8E,QACS,MAAAG,EAAPW,KAGF/E,KAAAiE,YAEF,GAAAxE,OACAK,IAcJ,SAAA6D,EAAAT,EAAAC,EAAAC,MACE,UAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjCjE,EAAQiE,MAAWc,GAAKf,WAA9BG,IAEM3D,EAAOR,MAAU+G,GAAKA,EAAf/G,WAAb,cAkBO,IAAA8D,EAnBP,eAmBOtD,EAjBU,CAACN,EAAQ0D,EAATM,UACX2B,EAAJ3F,MAEK,MAAL6G,KAAA/G,EAAuB,OACfgF,EAAAc,GAASiB,WAAflB,MAEAb,WACExE,OACO,CAAPwE,KAGFc,QAGK,MAAAX,EAAPU,KAYJ,MAAMmB,EAAQ,CAAAhD,MAAAiD,KAr0Bd,SAAAhD,EAAAC,EAAAC,MACM3C,gBAAJ,IAAkCyC,eAMxB,IAAAhD,yBAA6BgD,WAIjCkC,EAAMxB,kBAAZR,GACM+C,EAAOlD,EAAIC,EAAJD,UAAbG,GACMgD,EAASnD,EAAIC,EAAJD,UAAfG,GAEM3D,UAAe0G,EAAK1G,QAAQ2G,EAAO3G,eAqDlC,IAAAsD,EAtDP,OAsDOtD,EApDUN,UACTkH,EAAWxD,EAAjBM,KACQkD,YAARlH,QACMwF,GAAUS,WAAhBjG,MAEAwF,WACElF,OACO,CAAPkF,SAGIC,EAAN,GACM9E,EAAN,OAEK,IAALgG,KAAA3G,EAAqB,OACb2F,EAAI3F,EAAV2G,IACM7B,EAAAc,GAASoB,WAAfL,MAEA7B,EAAO,EACQA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAAoG,GAAAZ,OAAWD,EAA1BvF,QACAE,KAAAT,IACAa,KAAAiF,gBAKJF,QACMuB,EAAAC,GAAWH,WAAjBtB,GAEAwB,GACgBA,UAAa,CAA3BA,IACAtB,QAAcC,MACZvF,KAAe,CAAAoG,GAAAZ,OAAWD,EAA1BvF,QACAE,KAAAT,IACAa,KAAAiF,OAKJa,GAAAS,KAGEzG,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,WAowBUd,EAAA0C,MA/sBd,SAAAtD,EAAAC,EAAAC,UAEYE,EAAK,CADLQ,aACAR,EAAVF,aA6sBYG,EAAAkD,SAroBd,SAAAvD,EAAAC,EAAAC,SAEQ3D,cAAmByD,EAAOT,eAOzB,IAAAM,EARP,WAQOtD,EANU,CAACN,EAAQ0D,EAATM,KACRhE,eACH,MAAAiF,EADGjF,GAEH,CAAC,CAAES,KAAFT,EAAeO,KAAf,GAAAP,QAFLM,qBAgBJ,SAAAyD,EAAAC,EAAAC,MACE,WAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjCmC,EAAN,GACMC,EAAN,OAEK,MAALC,KAAArC,EAA0B,GACxBlD,KAAAuF,SAEMC,EAAOvC,EADHC,EAAVqC,QACatC,EAAbG,KACAmC,GAAAC,QAII/F,MAAW4F,mBA0CV,IAAAtC,EA3CP,YA2COtD,EAzCUN,UACTkH,EAAWxD,EAAjBM,KACQkD,YAARlH,QACMW,EAAN,GACM8E,EAANzF,MAEK,MAALoG,KAAAD,EAA8B,KACxBR,EAAI3F,EAARoG,SACMC,EAAOF,EAAbC,QAEAnB,IAAIU,MAEEjC,EADMC,GAAYA,EAAtByC,GACApG,UAGI8E,EAAAc,GAASS,aAAfrG,GAEA8E,GACeA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAA6F,GAAAL,OAAaD,EAA5BvF,QACAE,KAAAT,IACAa,KAAAiF,MAKAM,aAAJnB,IAAoBW,OAClBQ,GAAAR,MAIAjF,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,MAojBU8B,KAtiBd,SAAAxD,EAAAC,EAAAC,MACE,aAAI3C,WAMM,IAAAP,yBAA6BgD,SAIvCsC,EACAzG,WAWO,IAAAgE,EAVP,OACA,UACgB5D,MACL+D,MACTT,KAAY1D,EAAZyG,OACA/F,KAAYV,EAAZU,OACAuD,SAAgBjE,EAAhBiE,SACOwC,WAAPrG,MAkhBUmE,OAAAqD,QArZd,SAAAzD,EAAAC,EAAAC,SAEQ3D,cAAmBE,2BAOlB,IAAAoD,EARP,UAQOtD,EANU,CAACN,EAAQ0D,EAATM,KACRhE,MACH,MAAAiF,EADGjF,GAEH,CAAC,CAAES,KAAFT,EAAeO,KAAf,GAAAP,QAFLM,WAiZU+D,SAAAK,WAAA+C,QA3Rd,SAAA1D,EAAAC,EAAAC,MACE,WAAI3C,WAMM,IAAAP,yBAA6BgD,WAIjCkC,EAAMxB,kBAAZR,GACMiC,EAAN,GACMC,EAAN,OAEK,MAALC,KAAArC,EAA0B,GACxBlD,KAAAuF,SAEMC,EAAOvC,EADHC,EAAVqC,QACatC,EAAbG,KACAmC,GAAAC,QAII/F,MAAW4F,uBA+CV,IAAAtC,EAhDP,UAgDOtD,EA9CU,CAACN,EAAQ0D,EAATM,YACTwB,GAAUS,WAAhBjG,MAEAwF,WACElF,OACO,CAAPkF,SAGI7E,EAAN,GACM8E,EAAN,OAEK,MAALW,KAAAD,EAA8B,KACxBR,EAAI3F,EAARoG,SACMC,EAAOF,EAAbC,QAEAnB,IAAIU,MAEEjC,EADMC,GAAYA,EAAtByC,GACApG,UAGI8E,EAAAc,GAASS,aAAfrG,GAEA8E,GACeA,UAAY,CAAzBA,IACAe,QAAaC,MACXvF,KAAe,CAAA6F,GAAAL,OAAaD,EAA5BvF,QACAE,KAAAT,IACAa,KAAAiF,MAKAM,aAAJnB,IAAoBW,OAClBQ,GAAAR,MAIAjF,EAAJC,OAAmB,OACXoF,EAAQrF,EAAd,YACAA,SACO,CAAPqF,SAGK,MAAAf,EAAPQ,MAwNUhB,SAAAP,QAAAK,QAAAC,uBAngBd,SAAAkD,EAAA1D,EAAAC,MACE,aAAI3C,WAMM,IAAAP,yBAA6B2G,YA4BhC,IAAA9D,EAxBP,UACA,aACiB,CAAC5D,EAAQ0D,EAATM,GAAAvD,WACTsD,EAAS2D,IAAfjH,MAEA,aAAIa,WAMM,IAAAP,yBAA6BgD,WAIjCyB,EAAAN,GAAkBnB,WAAxB/D,UAEAwF,EACS,CAAPA,GAGK,MAAAP,EAAPC,OCpZEyC,EAAQ,KACP3H,QAAmBiF,IAAVjF,GCjChB,SAAAH,EAAqB+H,EAArB,UACQ9H,SAEA8H,SAFN,aAcAhI,EAAAmE,EAAAC,EAAkCC,EAAlC,IACMR,EAAJM,OACWA,EAATA,cAGIsC,EAAOS,kBAAbhH,oBAEA+H,EAAApH,MACMK,gBAAJ+G,QAMU,IAAA9G,MAAN,iCAIG8G,SAAPpH,iBAGFqH,eAAAD,EAAAtE,EAAyC,CAAEvD,OAA3C,WACA8H,eAAAD,EAAArE,EAAoC,CAAExD,MAAtCqG,MAEAA,KAAcA,EAAd/C,OACAhD,KAAc+F,EAAd/F,OACAyD,WACAJ,SAAAK,IACAC,YAEA8D,OAAgB/H,WACRwF,EAAAN,GAAkBmB,WAAxBrG,MAEAwF,QACQ,IAAArF,EAANqF,UAGFN,MAGF8C,KAAchI,WACNwF,GAAUa,WAAhBrG,UACAwF,MAGF3B,SAAkB7D,WACVwF,EAAAN,GAAkBmB,WAAxBrG,UAEAwF,EACS,CAAC,IAAArF,EAARqF,IAGK,MAAAP,EAAPC,KAGF2C,gBAOFb,KAAAF,GAAAjB,QAA2BvC,UACnB+C,EAAOS,EAAbxD,KAEAA,GAAe,EAAAS,EAAAC,EAAAC,YAEHrE,EADGyG,cAAbvG,WACUF,EAAVqE,OASJrE,EDhGY,gTAAd,WAyCAqI,QAAc3H,MACZA,GAAcN,IAASsB,OAAvBhB,KAUFqH,OAAa3H,IAASsB,gBAA6B4G,MAAnDP,IElDe9H,sCCVfJ,EAAAC,EAAAC,EAAA,sBAAAwI,IAEO,MAAMA,EAFb1I,EAAA,GAEkC2I;;;;;;;;;;;;;;;;+0CCelC,MAAMC,EAAmBzI,YAAO,CAC9BU,KAAM,SACNgI,MAAO,UACPC,IAAK,UACLC,aAAc,YAIT,IAAMC,80LAAbC,CAAA,CADCC,YAAc,2BACf,SAAAC,EAAAC,GAAA,OAAAC,EADA,cAAAD,EAEgCE,eAAAC,GAAAC,SAAAD,GAAAJ,EAAA9H,QADhCpB,EAAA,EAAA2G,KAAA,QAAA6C,WAAA,CAEGC,eAFH/C,IAAA,OAAApG,WAAA,IAAAqG,KAAA,QAAA6C,WAAA,CAIGC,eAJH/C,IAAA,UAAApG,WAAA,IAAAqG,KAAA,SAAAD,IAAA,YAAApG,MAME,SAAiB4H,GACfA,EAASS,EAAiBT,GAC1B9G,KAAKsI,QAAUxB,IARnB,CAAAvB,KAAA,MAAAD,IAAA,SAAApG,MAWE,WACE,OAAOc,KAAKsI,QAASd,OAAS,KAZlC,CAAAjC,KAAA,MAAAD,IAAA,OAAApG,MAeE,WACE,OAAOc,KAAKsI,QAASb,KAAO,KAhBhC,CAAAlC,KAAA,MAAAD,IAAA,gBAAApG,MAmBE,WACE,OAAOc,KAAKsI,QAASZ,cAAgB,KApBzC,CAAAnC,KAAA,SAAAD,IAAA,SAAApG,MAuBE,WACE,OAAKc,KAAKuI,KAIHjB;QACHD;;;;;sBAKcrH,KAAKwI;4BACC;8BACExI,KAAKyI;;;;;sBAKbC,OAAO1I,KAAK2I,cAAcpG,QAAQ,IAAK;4BACjC;8BACEvC,KAAKyI;;;;;oBAKfzI,KAAK4I;0BACC;4BACE5I,KAAKyI;;;MAzBpBnB,QAzBb,CAAA/B,KAAA,SAAAD,IAAA,gBAAApG,MAwDE,SAAsB2J,GACpB,IAAK7I,KAAKsI,UAAYtI,KAAKuI,KACzB,OAEF,MAAMO,EAASD,EAAGC,OAClB,IAAI5J,EAAQ4J,EAAO5J,MAES,iBAAxB4J,EAAOC,aAAmCD,EAAO5J,QACnDA,GAAS,KAGPc,SAAS8I,EAAOC,iBAAmB7J,IAGnC4J,EAAOC,cACY,KAAjBD,EAAO5J,aACFc,KAAKsI,QAAQQ,EAAOC,aAE3B/I,KAAKsI,QAALhI,OAAA0I,OAAA,GAAoBhJ,KAAKsI,QAAzB,CAAkCL,CAACa,EAAOC,aAAe7J,KAG7D+J,YAAUjJ,KAAM,iBAAkB,CAAE8G,OAAQ9G,KAAKsI,gBA7EZY","file":"chunk.4f3dc04b3dcdfff82649.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { IframeCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string?\",\n  url: \"string?\",\n  aspect_ratio: \"string?\",\n});\n\n@customElement(\"hui-iframe-card-editor\")\nexport class HuiIframeCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: IframeCardConfig;\n\n  public setConfig(config: IframeCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _url(): string {\n    return this._config!.url || \"\";\n  }\n\n  get _aspect_ratio(): string {\n    return this._config!.aspect_ratio || \"\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            label=\"Title\"\n            .value=\"${this._title}\"\n            .configValue=\"${\"title\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <paper-input\n            label=\"Aspect Ratio\"\n            type=\"number\"\n            .value=\"${Number(this._aspect_ratio.replace(\"%\", \"\"))}\"\n            .configValue=\"${\"aspect_ratio\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n        </div>\n        <paper-input\n          label=\"Url\"\n          .value=\"${this._url}\"\n          .configValue=\"${\"url\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    let value = target.value;\n\n    if (target.configValue! === \"aspect_ratio\" && target.value) {\n      value += \"%\";\n    }\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = { ...this._config, [target.configValue!]: value };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-iframe-card-editor\": HuiIframeCardEditor;\n  }\n}\n"],"sourceRoot":""}