{"version":3,"sources":["webpack:///./src/panels/config/cloud/google-assistant/cloud-google-assistant.ts","webpack:///./src/data/google_assistant.ts"],"names":["configIsExposed","config","undefined","should_expose","customElement","CloudGoogleAssistant","_LitElement","[object Object]","args","super","_initialize","this","property","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_entities","html","emptyFilter","isEmptyFilter","cloudStatus","google_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_showMoreInfo","traits","map","trait","substr","lastIndexOf","join","_exposeChanged","might_2fa","Boolean","disable_2fa","_disable2FAChanged","narrow","_openDomainToggler","length","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","google_entity_configs","async","entities","callWS","type","fetchCloudGoogleEntities","sort","a","b","stateA","stateB","compare","computeStateName","ev","entityId","currentTarget","fireEvent","newExposed","detail","value","_updateExposed","_updateConfig","_ensureEntitySync","newDisable2FA","values","updatedConfig","updateCloudGoogleEntityConfig","Object","assign","_ensureStatusReload","showDomainTogglerDialog","domains","computeDomain","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","showToast","message","cloudSyncGoogleAssistant","css","LitElement"],"mappings":"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","file":"chunk.c659a1fb5ef8c5de61e3.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-toggle-button\";\nimport \"@polymer/paper-icon-button\";\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../../data/cloud\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showToast } from \"../../../../util/toast\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n} from \"../../../../data/google_assistant\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <paper-toggle-button\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @checked-changed=${this._exposeChanged}\n            >\n              Expose to Google Assistant\n            </paper-toggle-button>\n            ${entity.might_2fa\n              ? html`\n                  <paper-toggle-button\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @checked-changed=${this._disable2FAChanged}\n                  >\n                    Disable two factor authentication\n                  </paper-toggle-button>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"Google Assistant\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  Editing which entities are exposed via this UI is disabled\n                  because you have configured entity filters in\n                  configuration.yaml.\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>Exposed entities</h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>Not Exposed entities</h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = ev.detail.value;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = ev.detail.value;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n        --paper-toggle-button-label-spacing: 16px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      paper-toggle-button {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n","import { HomeAssistant } from \"../types\";\n\nexport interface GoogleEntity {\n  entity_id: string;\n  traits: string[];\n  might_2fa: boolean;\n}\n\nexport const fetchCloudGoogleEntities = (hass: HomeAssistant) =>\n  hass.callWS<GoogleEntity[]>({ type: \"cloud/google_assistant/entities\" });\n"],"sourceRoot":""}