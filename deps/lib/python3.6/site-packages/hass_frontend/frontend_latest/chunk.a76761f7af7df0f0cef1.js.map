{"version":3,"sources":["webpack:///./src/resources/ha-chart-scripts.js"],"names":["__webpack_require__","r","__webpack_exports__","chart_js__WEBPACK_IMPORTED_MODULE_0__","chart_js__WEBPACK_IMPORTED_MODULE_0___default","n","Chart","Interaction","modes","neareach","chart","e","options","getRange","x","a","b","Math","abs","y","xy","pow","position","native","helpers","getRelativePosition","elements","elementsRange","datasets","data","meta","axis","rangeFunc","rangeMaxFunc","i","ilen","length","isDatasetVisible","j","jlen","getDatasetMeta","element","_view","skip","vm","range","oldRange","radius","hitRadius","undefined","filter"],"mappings":"uFAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAH,EAAA,KAKAM,IAAMC,YAAYC,MAAMC,SAAW,SAASC,EAAOC,EAAGC,GACpD,MAAMC,EAAW,CACfC,EAAG,CAACC,EAAGC,IAAMC,KAAKC,IAAIH,EAAED,EAAIE,EAAEF,GAC9BK,EAAG,CAACJ,EAAGC,IAAMC,KAAKC,IAAIH,EAAEI,EAAIH,EAAEG,GAE9BC,GAAI,CAACL,EAAGC,IAAMC,KAAKI,IAAIN,EAAED,EAAIE,EAAEF,EAAG,GAAKG,KAAKI,IAAIN,EAAEI,EAAIH,EAAEG,EAAG,IAO7D,IAAIG,EAEFA,EADEX,EAAEY,OACO,CACTT,EAAGH,EAAEG,EACLK,EAAGR,EAAEQ,GAGIb,IAAMkB,QAAQC,oBAAoBd,EAAGD,GAElD,MAAMgB,EAAW,GACXC,EAAgB,GAChBC,EAAWlB,EAAMmB,KAAKD,SAC5B,IAAIE,EACJlB,EAAQmB,KAAOnB,EAAQmB,MAAQ,KAC/B,MAAMC,EAAYnB,EAASD,EAAQmB,MAC7BE,EApBc,CAClBnB,EAAIb,GAAMA,EACVkB,EAAIlB,GAAMA,EACVmB,GAAKnB,GAAMA,EAAIA,GAiBgBW,EAAQmB,MAEzC,IAAK,IAAIG,EAAI,EAAGC,EAAOP,EAASQ,OAAQF,EAAIC,IAAQD,EAClD,GAAKxB,EAAM2B,iBAAiBH,GAK5B,IAAK,IAAII,EAAI,EAAGC,GADhBT,EAAOpB,EAAM8B,eAAeN,IACAL,KAAKO,OAAQE,EAAIC,IAAQD,EAAG,CACtD,MAAMG,EAAUX,EAAKD,KAAKS,GAC1B,IAAKG,EAAQC,MAAMC,KAAM,CACvB,MAAMC,EAAKH,EAAQC,MACbG,EAAQb,EAAUY,EAAItB,GACtBwB,EAAWnB,EAAcO,GAC3BW,EAAQZ,EAAaW,EAAGG,OAASH,EAAGI,kBACrBC,IAAbH,GAA0BA,EAAWD,KACvClB,EAAcO,GAAKW,EACnBnB,EAASQ,GAAKO,IAOxB,OADYf,EAASwB,OAAQ7C,QAAY4C,IAAN5C,IAItBC,YAAf","file":"chunk.a76761f7af7df0f0cef1.js","sourcesContent":["import Chart from \"chart.js\";\nimport \"chartjs-chart-timeline\";\n\n// This function add a new interaction mode to Chart.js that\n// returns one point for every dataset.\nChart.Interaction.modes.neareach = function(chart, e, options) {\n  const getRange = {\n    x: (a, b) => Math.abs(a.x - b.x),\n    y: (a, b) => Math.abs(a.y - b.y),\n    // eslint-disable-next-line no-restricted-properties\n    xy: (a, b) => Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2),\n  };\n  const getRangeMax = {\n    x: (r) => r,\n    y: (r) => r,\n    xy: (r) => r * r,\n  };\n  let position;\n  if (e.native) {\n    position = {\n      x: e.x,\n      y: e.y,\n    };\n  } else {\n    position = Chart.helpers.getRelativePosition(e, chart);\n  }\n  const elements = [];\n  const elementsRange = [];\n  const datasets = chart.data.datasets;\n  let meta;\n  options.axis = options.axis || \"xy\";\n  const rangeFunc = getRange[options.axis];\n  const rangeMaxFunc = getRangeMax[options.axis];\n\n  for (let i = 0, ilen = datasets.length; i < ilen; ++i) {\n    if (!chart.isDatasetVisible(i)) {\n      continue;\n    }\n\n    meta = chart.getDatasetMeta(i);\n    for (let j = 0, jlen = meta.data.length; j < jlen; ++j) {\n      const element = meta.data[j];\n      if (!element._view.skip) {\n        const vm = element._view;\n        const range = rangeFunc(vm, position);\n        const oldRange = elementsRange[i];\n        if (range < rangeMaxFunc(vm.radius + vm.hitRadius)) {\n          if (oldRange === undefined || oldRange > range) {\n            elementsRange[i] = range;\n            elements[i] = element;\n          }\n        }\n      }\n    }\n  }\n  const ret = elements.filter((n) => n !== undefined);\n  return ret;\n};\n\nexport default Chart;\n"],"sourceRoot":""}