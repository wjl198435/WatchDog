{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-entity-editor.ts","webpack:///./src/panels/lovelace/editor/process-editor-entities.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-glance-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","decorators","property","key","entities","html","map","entityConf","index","hass","entity","_valueChanged","_entityDown","length","_entityUp","_addEntity","ev","target","newConfigEntities","concat","fireEvent","newEntities","splice","Object","assign","static","css","LitElement","processEditorEntities","entitiesConfigStruct","union","name","cardConfigStruct","type","title","theme","columns","show_name","show_state","show_icon","HuiGlanceCardEditor","config","_config","_configEntities","NaN","configElementStyle","_title","_theme","_columns","_show_name","_show_icon","_show_state","configValue","detail","isNaN","Number","undefined","checked"],"mappings":"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","file":"chunk.b035d0aff20ef62b68ad.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected entities?: EntityConfig[];\n\n  protected render(): TemplateResult | void {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>Entities</h3>\n      <div class=\"entities\">\n        ${this.entities.map((entityConf, index) => {\n          return html`\n            <div class=\"entity\">\n              <ha-entity-picker\n                .hass=\"${this.hass}\"\n                .value=\"${entityConf.entity}\"\n                .index=\"${index}\"\n                @change=\"${this._valueChanged}\"\n                allow-custom-entity\n              ></ha-entity-picker>\n              <paper-icon-button\n                title=\"Move entity down\"\n                icon=\"hass:arrow-down\"\n                .index=\"${index}\"\n                @click=\"${this._entityDown}\"\n                ?disabled=\"${index === this.entities!.length - 1}\"\n              ></paper-icon-button>\n              <paper-icon-button\n                title=\"Move entity up\"\n                icon=\"hass:arrow-up\"\n                .index=\"${index}\"\n                @click=\"${this._entityUp}\"\n                ?disabled=\"${index === 0}\"\n              ></paper-icon-button>\n            </div>\n          `;\n        })}\n        <ha-entity-picker\n          .hass=\"${this.hass}\"\n          @change=\"${this._addEntity}\"\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _addEntity(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: target.value as string,\n    });\n    target.value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _entityUp(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newEntities = this.entities!.concat();\n\n    [newEntities[target.index! - 1], newEntities[target.index!]] = [\n      newEntities[target.index!],\n      newEntities[target.index! - 1],\n    ];\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _entityDown(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newEntities = this.entities!.concat();\n\n    [newEntities[target.index! + 1], newEntities[target.index!]] = [\n      newEntities[target.index!],\n      newEntities[target.index! + 1],\n    ];\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _valueChanged(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newConfigEntities = this.entities!.concat();\n\n    if (target.value === \"\") {\n      newConfigEntities.splice(target.index!, 1);\n    } else {\n      newConfigEntities[target.index!] = {\n        ...newConfigEntities[target.index!],\n        entity: target.value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .entities {\n        padding-left: 20px;\n      }\n      .entity {\n        display: flex;\n        align-items: flex-end;\n      }\n      .entity ha-entity-picker {\n        flex-grow: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n","import { EntityConfig } from \"../entity-rows/types\";\n\nexport function processEditorEntities(entities): EntityConfig[] {\n  return entities.map((entityConf) => {\n    if (typeof entityConf === \"string\") {\n      return { entity: entityConf };\n    }\n    return entityConf;\n  });\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-toggle-button/paper-toggle-button\";\n\nimport \"../../../../components/entity/state-badge\";\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { GlanceCardConfig, ConfigEntity } from \"../../cards/types\";\n\nconst entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string|number?\",\n  theme: \"string?\",\n  columns: \"number?\",\n  show_name: \"boolean?\",\n  show_state: \"boolean?\",\n  show_icon: \"boolean?\",\n  entities: [entitiesConfigStruct],\n});\n\n@customElement(\"hui-glance-card-editor\")\nexport class HuiGlanceCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: GlanceCardConfig;\n\n  @property() private _configEntities?: ConfigEntity[];\n\n  public setConfig(config: GlanceCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  get _columns(): number {\n    return this._config!.columns || NaN;\n  }\n\n  get _show_name(): boolean {\n    return this._config!.show_name || true;\n  }\n\n  get _show_icon(): boolean {\n    return this._config!.show_icon || true;\n  }\n\n  get _show_state(): boolean {\n    return this._config!.show_state || true;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Title\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=\"${this.hass}\"\n            .value=\"${this._theme}\"\n            .configValue=\"${\"theme\"}\"\n            @theme-changed=\"${this._valueChanged}\"\n          ></hui-theme-select-editor>\n          <paper-input\n            label=\"Columns\"\n            type=\"number\"\n            .value=\"${this._columns}\"\n            .configValue=\"${\"columns\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n        </div>\n        <div class=\"side-by-side\">\n          <paper-toggle-button\n            ?checked=\"${this._show_name !== false}\"\n            .configValue=\"${\"show_name\"}\"\n            @change=\"${this._valueChanged}\"\n            >Show Name?</paper-toggle-button\n          >\n          <paper-toggle-button\n            ?checked=\"${this._show_icon !== false}\"\n            .configValue=\"${\"show_icon\"}\"\n            @change=\"${this._valueChanged}\"\n            >Show Icon?</paper-toggle-button\n          >\n          <paper-toggle-button\n            ?checked=\"${this._show_state !== false}\"\n            .configValue=\"${\"show_state\"}\"\n            @change=\"${this._valueChanged}\"\n            >Show State?</paper-toggle-button\n          >\n        </div>\n      </div>\n      <hui-entity-editor\n        .hass=\"${this.hass}\"\n        .entities=\"${this._configEntities}\"\n        @entities-changed=\"${this._valueChanged}\"\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (target.configValue && this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (\n        target.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(target.value)))\n      ) {\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = target.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined ? target.checked : value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-glance-card-editor\": HuiGlanceCardEditor;\n  }\n}\n"],"sourceRoot":""}