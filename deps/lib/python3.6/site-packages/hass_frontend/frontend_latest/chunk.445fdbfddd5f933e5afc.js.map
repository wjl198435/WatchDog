{"version":3,"sources":["webpack:///./src/panels/config/cloud/alexa/cloud-alexa.ts"],"names":["IGNORE_INTERFACES","configIsExposed","config","undefined","should_expose","customElement","CloudAlexa","_LitElement","[object Object]","args","super","_initialize","this","property","type","Boolean","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_entities","html","emptyFilter","isEmptyFilter","cloudStatus","alexa_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_showMoreInfo","interfaces","ifc","includes","map","replace","join","_exposeChanged","narrow","_openDomainToggler","length","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","alexa_entity_configs","async","entities","fetchCloudAlexaEntities","sort","a","b","stateA","stateB","compare","computeStateName","ev","entityId","currentTarget","fireEvent","newExposed","detail","value","_updateExposed","_updateConfig","_ensureEntitySync","values","updatedConfig","updateCloudAlexaEntityConfig","Object","assign","_ensureStatusReload","showDomainTogglerDialog","domains","computeDomain","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","css","LitElement"],"mappings":"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","file":"chunk.445fdbfddd5f933e5afc.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-toggle-button\";\nimport \"@polymer/paper-icon-button\";\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudAlexaEntityConfig,\n  AlexaEntityConfig,\n} from \"../../../../data/cloud\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\nconst configIsExposed = (config: AlexaEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() private _entities?: AlexaEntity[];\n\n  @property()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.interfaces\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                .map((ifc) =>\n                  ifc.replace(\"Alexa.\", \"\").replace(\"Controller\", \"\")\n                )\n                .join(\", \")}\n            </state-info>\n            <paper-toggle-button\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @checked-changed=${this._exposeChanged}\n            >\n              Expose to Alexa\n            </paper-toggle-button>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"Alexa\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  Editing which entities are exposed via this UI is disabled\n                  because you have configured entity filters in\n                  configuration.yaml.\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>Exposed entities</h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>Not Exposed entities</h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = ev.detail.value;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    // const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n        // showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        // cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n        --paper-toggle-button-label-spacing: 16px;\n      }\n      paper-toggle-button {\n        clear: both;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      paper-toggle-button {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"sourceRoot":""}